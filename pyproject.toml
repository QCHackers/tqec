[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tqec"
version = "0.0.1"
authors = [
    { name = "TQEC community", email = "tqec-design-automation@googlegroups.com" },
]
description = "A design automation framework for Topological Quantum Error Correction."
readme = "README.md"
license = { file = "LICENSE" }
keywords = ["topological quantum error correction", "qec"]
requires-python = ">= 3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: JavaScript",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: User Interfaces",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dynamic = ["dependencies"]

[project.urls]
Website = "https://tqec.app"
Documentation = "https://qchackers.github.io/tqec/"
Repository = "https://github.com/QCHackers/tqec"
Issues = "https://github.com/QCHackers/tqec/issues"

[project.optional-dependencies]
test = ["pytest", "mypy", "pytest-cov"]
dev = ["sinter", "pymatching", "jupyterlab", "tqec[test, doc]", "pre-commit"]
doc = ["sphinx", "myst-parser", "sphinx-rtd-theme", "nbsphinx", "pandoc"]
all = ["tqec[test, dev, doc]"]

[project.scripts]
tqec = "tqec._cli.tqec:main"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["*test.py"]

[tool.setuptools.package-data]
tqec = ["py.typed"]

[tool.setuptools.dynamic]
dependencies = { file = "requirements.txt" }


[tool.mypy]
# See https://numpy.org/devdocs/reference/typing.html
plugins = "numpy.typing.mypy_plugin"
# Start off with these
warn_unused_configs = true
warn_redundant_casts = true
# Explicitly disable that for the moment, will eventually be turned on again.
warn_unused_ignores = false
warn_unreachable = true

# Getting these passing should be easy
strict_equality = true
extra_checks = true

# Strongly recommend enabling this one as soon as you can
check_untyped_defs = true

# These shouldn't be too much additional work, but may be tricky to
# get passing if you use a lot of untyped libraries
disallow_subclassing_any = true
disallow_untyped_decorators = true
disallow_any_generics = true

# These next few are various gradations of forcing use of type annotations
disallow_untyped_calls = true
disallow_incomplete_defs = true
disallow_untyped_defs = true

# This one isn't too hard to get passing, but return on investment is lower
# Disabled due to issues with cirq not reexporting explicitly.
no_implicit_reexport = false

# This one can be tricky to get passing if you use a lot of untyped libraries
warn_return_any = true


# See https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml
[[tool.mypy.overrides]]
module = [
    "stim",
    "pysat",
    "pysat.solvers",
    "collada",
    "collada.source",
    "networkx",
    "stimcirq",
    # Added due to missing stubs for last version (1.13.1)
    "sympy",
    "mpl_toolkits.mplot3d.axes3d",
]
ignore_missing_imports = true

[tool.coverage.run]
omit = ["*/*_test.py"]

[tool.coverage.report]
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
